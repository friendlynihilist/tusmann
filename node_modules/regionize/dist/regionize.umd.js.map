{"version":3,"file":"regionize.umd.js","sources":["../src/Region.js","../src/nodeTypes.js","../src/schedule.js","../src/ignoreOverflow.js","../src/addTextNode.js","../src/tryInNextRegion.js","../src/clonePath.js","../src/ensureImageLoaded.js","../src/orderedListRule.js","../src/tableRowRule.js","../src/flowIntoRegions.js"],"sourcesContent":["const div = (cls) => {\n  const el = document.createElement('div');\n  el.classList.add(cls);\n  return el;\n};\n\nclass Region {\n  constructor(elmt) {\n    this.element = elmt;\n    this.content = div('region-content');\n    this.content.style.padding = '0.1px';\n    this.content.style.position = 'relative';\n    this.element.appendChild(this.content);\n    this.path = [];\n  }\n\n  setPath(newPath) {\n    this.path = newPath;\n    if (newPath.length > 0) this.content.appendChild(newPath[0]);\n  }\n\n  get currentElement() {\n    const len = this.path.length;\n    if (len > 0) return this.path[len - 1];\n    return this.content;\n  }\n\n  get isEmpty() {\n    return this.content.textContent.trim() === '' && this.content.offsetHeight < 1;\n  }\n\n  get isReasonableSize() {\n    const box = this.element.getBoundingClientRect();\n    return (box.height > 100) && (box.width > 100); // TODO: Number is arbitrary\n  }\n\n  overflowAmount() {\n    const contentH = this.content.offsetHeight;\n    const boxH = this.element.offsetHeight;\n    if (boxH === 0) throw Error('Regionizer: Trying to flow into an element with zero height.');\n    return contentH - boxH;\n  }\n\n  hasOverflowed() {\n    return this.overflowAmount() > -5;\n  }\n}\n\nexport default Region;\n","const isTextNode = node => node.nodeType === Node.TEXT_NODE;\nconst isElement = node => node.nodeType === Node.ELEMENT_NODE;\nconst isScript = node => node.tagName === 'SCRIPT';\nconst isImage = node => node.tagName === 'IMG';\nconst isUnloadedImage = node => isImage(node) && !node.naturalWidth;\nconst isContentElement = node => isElement(node) && !isScript(node);\n\nexport { isTextNode, isElement, isContentElement, isUnloadedImage };\n","const MAX_TIME = 30; // ms\n\nconst rAF = () => new Promise((resolve) => {\n  requestAnimationFrame(t => resolve(t));\n});\n\nlet lastYieldTime = 0;\n\nconst shouldYield = () => {\n  const timeSinceYield = performance.now() - lastYieldTime;\n  return timeSinceYield > MAX_TIME;\n};\n\nconst yieldIfNecessary = async () => {\n  if (shouldYield()) lastYieldTime = await rAF();\n};\n\nexport { shouldYield, yieldIfNecessary };\n","const overflowAttr = 'data-ignore-overflow';\n// Walk up the tree to see if we are within\n// an overflow-ignoring node\nconst ignoreOverflow = (element) => {\n  if (element.hasAttribute(overflowAttr)) return true;\n  if (element.parentElement) return ignoreOverflow(element.parentElement);\n  return false;\n};\n\nexport default ignoreOverflow;\n","import { yieldIfNecessary } from './schedule';\nimport ignoreOverflow from './ignoreOverflow';\nimport { isTextNode } from './nodeTypes';\n\nconst createTextNode = (document.createTextNode).bind(document);\n\n// Try adding a text node in one go.\n// Returns true if all the text fits, false if none fits.\nconst addTextNode = async (textNode, parent, hasOverflowed) => {\n  parent.appendChild(textNode);\n  const success = !hasOverflowed();\n  if (!success) parent.removeChild(textNode);\n  await yieldIfNecessary();\n  return success;\n};\n\n\n// Try adding a text node by incrementally adding words\n// until it just barely doesnt overflow.\n//\n// Returns true if all the text fits, false if none fits,\n// or new textnode containing the remainder text.\nconst addTextNodeUntilOverflow = async (textNode, parent, hasOverflowed) => {\n  const originalText = textNode.nodeValue;\n  parent.appendChild(textNode);\n\n  if (!hasOverflowed() || ignoreOverflow(parent)) {\n    return true;\n  }\n\n  // Add letter by letter until overflow\n  let pos = 0;\n  textNode.nodeValue = originalText.substr(0, pos);\n\n  while (!hasOverflowed() && pos < originalText.length) {\n    // advance to next non-space character\n    pos += 1;\n    while (pos < originalText.length && originalText.charAt(pos) !== ' ') pos += 1;\n\n    if (pos < originalText.length) {\n      // reveal more text\n      textNode.nodeValue = originalText.substr(0, pos);\n      await yieldIfNecessary();\n    }\n  }\n\n  // Back out to word boundary\n  if (originalText.charAt(pos) === ' ') pos -= 1; // TODO: redundant\n  while (originalText.charAt(pos) !== ' ' && pos > 0) pos -= 1;\n\n  if (pos < 1) {\n    // We didn't even add a complete word, don't add node\n    textNode.nodeValue = originalText;\n    parent.removeChild(textNode);\n    return false; // TODO\n  }\n\n  // trim text to word\n  const fittingText = originalText.substr(0, pos);\n  const overflowingText = originalText.substr(pos);\n  textNode.nodeValue = fittingText;\n\n  // Create a new text node for the next flow box\n  const remainingTextNode = createTextNode(overflowingText);\n  return remainingTextNode;\n};\n\n\n// Fills text across multiple elements by requesting a continuation\n// once the current element overflows\nconst addTextNodeAcrossParents = async (textNode, parent, nextParent, hasOverflowed) => {\n  const result = await addTextNodeUntilOverflow(textNode, parent, hasOverflowed);\n  if (isTextNode(result)) {\n    const nextElement = nextParent();\n    return addTextNodeAcrossParents(result, nextElement, nextParent, hasOverflowed);\n  }\n  return result;\n};\n\nexport { addTextNode, addTextNodeUntilOverflow, addTextNodeAcrossParents };\n","// Shifts this element to the next page. If any of its\n// ancestors cannot be split across page, it will\n// step up the tree to find the first ancestor\n// that can be split, and move all of that descendants\n// to the next page.\nconst tryInNextRegion = (region, makeNextRegion, canSplit) => {\n  if (region.path.length <= 1) {\n    throw Error('Regionize: Attempting to move the top-level element');\n  }\n  const startLength = region.path.length;\n\n  // So this node won't get cloned. TODO: this is unclear\n  const elementToMove = region.path.pop();\n\n  // find the nearest splittable parent\n  let nearestElementThatCanBeMoved = elementToMove;\n  const pathToRestore = [];\n  while (region.path.length > 1 && !canSplit(region.currentElement)) {\n    nearestElementThatCanBeMoved = region.path.pop();\n    pathToRestore.unshift(nearestElementThatCanBeMoved);\n  }\n\n  // Once a node is moved to a new page, it should no longer trigger another\n  // move. otherwise tall elements will endlessly get shifted to the next page\n  nearestElementThatCanBeMoved.setAttribute('data-bindery-did-move', true);\n\n  const parent = nearestElementThatCanBeMoved.parentNode;\n  parent.removeChild(nearestElementThatCanBeMoved);\n\n  // If the nearest ancestor would be empty without this node,\n  // move it to the next page too.\n  if (region.path.length > 1 && region.currentElement.textContent.trim() === '') {\n    parent.appendChild(nearestElementThatCanBeMoved);\n    nearestElementThatCanBeMoved = region.path.pop();\n    pathToRestore.unshift(nearestElementThatCanBeMoved);\n    nearestElementThatCanBeMoved.parentNode.removeChild(nearestElementThatCanBeMoved);\n  }\n\n  let nextRegion;\n  if (!region.isEmpty) {\n    if (region.hasOverflowed()) {\n      // Recovery failed, maybe the box contains a large\n      // unsplittable element.\n      region.suppressErrors = true;\n    }\n    nextRegion = makeNextRegion();\n  } else {\n    // If the page is empty when this node is removed,\n    // then it won't help to move it to the next page.\n    // Instead continue here until the node is done.\n    nextRegion = region;\n  }\n\n  // append moved node as first in new page\n  nextRegion.currentElement.appendChild(nearestElementThatCanBeMoved);\n\n  // restore subpath\n  pathToRestore.forEach(r => nextRegion.path.push(r));\n  nextRegion.path.push(elementToMove);\n\n  if (startLength !== nextRegion.path.length) {\n    throw Error('Regionize: Restored path depth does not match original path depth');\n  }\n};\n\nexport default tryInNextRegion;\n","// The path is an array of nested elments,\n// for example .content > article > p > a).\n//\n// It's shallowly cloned every time we move to the next page,\n// to create the illusion that nodes are continuing from page\n// to page.\n//\n// The transition can be customized by setting a Split rule,\n// which lets you add classes to the original and cloned element\n// to customize styling.\n\nconst clonePath = (oldPath, applyRules) => {\n  const newPath = [];\n\n  const deepClone = (el) => {\n    const clone = el.cloneNode(true); // deep clone, could be th > h3 > span;\n    applyRules(el, clone);\n    return clone;\n  };\n\n  for (let i = oldPath.length - 1; i >= 0; i -= 1) {\n    const original = oldPath[i];\n    const clone = original.cloneNode(false); // shallow\n    const nextChild = oldPath[i + 1];\n    clone.innerHTML = '';\n\n    applyRules(original, clone, nextChild, deepClone);\n\n    if (i < oldPath.length - 1) clone.appendChild(newPath[i + 1]);\n    newPath[i] = clone;\n  }\n\n  return newPath;\n};\n\nexport default clonePath;\n","// Polls every 10ms for image.naturalWidth\n// or an error event.\n//\n// Note: Doesn't ever reject, since missing images\n// shouldn't prevent layout from resolving\n\nconst wait10 = () => new Promise((resolve) => {\n  setTimeout(() => { resolve(); }, 10);\n});\n\nconst ensureImageLoaded = async (image) => {\n  const imgStart = performance.now();\n  let failed = false;\n  image.addEventListener('error', () => { failed = true; });\n  image.src = image.src; // re-trigger error if already failed\n\n  while (!image.naturalWidth && !failed) {\n    await wait10();\n  }\n\n  return performance.now() - imgStart;\n};\n\nexport default ensureImageLoaded;\n","const preserveNumbering = (original, clone, nextChild) => {\n  // restart numbering\n  let prevStart = 1;\n  if (original.hasAttribute('start')) {\n    // the OL is also a continuation\n    prevStart = parseInt(original.getAttribute('start'), 10);\n  }\n  if (nextChild && nextChild.tagName === 'LI') {\n    // the first list item is a continuation\n    prevStart -= 1;\n  }\n  const prevCount = original.children.length;\n  const newStart = prevStart + prevCount;\n  clone.setAttribute('start', newStart);\n};\n\nexport default preserveNumbering;\n","const preserveTableColumns = (original, clone, nextChild, deepClone) => {\n  const columns = [...original.children];\n\n  const currentIndex = columns.indexOf(nextChild);\n  for (let i = 0; i < currentIndex; i += 1) {\n    const clonedCol = deepClone(columns[i]);\n    clone.appendChild(clonedCol);\n  }\n};\n\nexport default preserveTableColumns;\n","import { isTextNode, isUnloadedImage, isContentElement } from './nodeTypes';\nimport { addTextNode, addTextNodeAcrossParents } from './addTextNode';\nimport tryInNextRegion from './tryInNextRegion';\nimport ignoreOverflow from './ignoreOverflow';\nimport clonePath from './clonePath';\nimport ensureImageLoaded from './ensureImageLoaded';\nimport orderedListRule from './orderedListRule';\nimport tableRowRule from './tableRowRule';\n\nconst noop = () => {};\nconst always = () => true;\nconst never = () => false;\n\n// flow content through FlowBoxes.\n// This function is not book-specific,\n// the caller is responsible for managing\n// and creating boxes.\nconst flowIntoRegions = async (opts) => {\n  // required options\n  const content = opts.content;\n  const createRegion = opts.createRegion;\n  if (!content) throw Error('content not specified');\n  if (!createRegion) throw Error('createRegion not specified');\n\n  // optional\n  const applySplit = opts.applySplit || noop;\n  const canSplit = opts.canSplit || always;\n  const beforeAdd = opts.beforeAdd || noop;\n  const afterAdd = opts.afterAdd || noop;\n  const didWaitFor = opts.didWaitFor || noop;\n  const shouldTraverse = opts.shouldTraverse || never;\n\n  // ____\n  // Begin\n  let currentRegion = createRegion();\n  const hasOverflowed = () => currentRegion.hasOverflowed();\n  const canSplitCurrent = () => canSplit(currentRegion.currentElement);\n  const ignoreCurrentOverflow = () => ignoreOverflow(currentRegion.currentElement);\n\n  const splitRules = (prev, clone, next, deepClone) => {\n    if (prev.tagName === 'OL') orderedListRule(prev, clone, next, deepClone);\n    if (prev.tagName === 'TR') tableRowRule(prev, clone, next, deepClone);\n    applySplit(prev, clone, next, deepClone);\n  };\n\n  const continueInNextRegion = () => {\n    const oldBox = currentRegion;\n    currentRegion = createRegion();\n\n    const newPath = clonePath(oldBox.path, splitRules);\n    currentRegion.setPath(newPath);\n    return currentRegion;\n  };\n\n  const continuedParent = () => {\n    continueInNextRegion();\n    return currentRegion.currentElement;\n  };\n\n  const addTextWithoutChecks = (textNode, parent) => {\n    parent.appendChild(textNode);\n    if (!ignoreCurrentOverflow() && canSplitCurrent()) {\n      currentRegion.suppressErrors = true;\n      continueInNextRegion();\n    }\n  };\n\n  const addSplittableTextNode = async (textNode) => {\n    const el = currentRegion.currentElement;\n    let hasAdded = await addTextNodeAcrossParents(textNode, el, continuedParent, hasOverflowed);\n    if (!hasAdded && currentRegion.path.length > 1) {\n      // retry 1\n      tryInNextRegion(currentRegion, continueInNextRegion, canSplit);\n      hasAdded = await addTextNodeAcrossParents(textNode, el, continuedParent, hasOverflowed);\n    }\n    if (!hasAdded) {\n      // retry 2\n      addTextWithoutChecks(textNode, currentRegion.currentElement);\n    }\n  };\n\n  const addWholeTextNode = async (textNode) => {\n    let hasAdded = await addTextNode(textNode, currentRegion.currentElement, hasOverflowed);\n    if (!hasAdded && !ignoreCurrentOverflow()) {\n      // retry 1\n      tryInNextRegion(currentRegion, continueInNextRegion, canSplit);\n      hasAdded = await addTextNode(textNode, currentRegion.currentElement, hasOverflowed);\n    }\n    if (!hasAdded) {\n      // retry 2\n      addTextWithoutChecks(textNode, currentRegion.currentElement);\n    }\n  };\n\n  // No need to traverse every node if fifts AND\n  // none of the contents could change size.\n  // Images and custom rules could cause the size to change\n  const canSkipTraversal = (element) => {\n    const containsImage = element.querySelector('img');\n    return !containsImage && !shouldTraverse(element);\n  };\n\n  let safeAddElementNode;\n\n  // Adds an element node by clearing its childNodes, then inserting them\n  // one by one recursively until they overflow the region\n  const addElementNode = async (element) => {\n    // Insert element\n    currentRegion.currentElement.appendChild(element);\n    currentRegion.path.push(element);\n\n    if (canSkipTraversal(element)) {\n      // console.log('maybe short circuit');\n      if (!hasOverflowed()) {\n        // console.log('did short circuit');\n        return currentRegion.path.pop();\n      }\n    }\n\n    // Clear element\n    const childNodes = [...element.childNodes];\n    element.innerHTML = '';\n\n    // Overflows when empty\n    if (hasOverflowed() && !ignoreCurrentOverflow() && canSplitCurrent()) {\n      tryInNextRegion(currentRegion, continueInNextRegion, canSplit);\n    }\n\n    const shouldSplit = canSplit(element) && !ignoreOverflow(element);\n\n    for (const child of childNodes) {\n      if (isTextNode(child)) {\n        await (shouldSplit ? addSplittableTextNode : addWholeTextNode)(child);\n      } else if (isContentElement(child)) {\n        await safeAddElementNode(child);\n      } else {\n        // Skip comments and unknown nodes\n      }\n    }\n    return currentRegion.path.pop();\n  };\n\n  safeAddElementNode = async (element) => {\n    // Ensure images are loaded before measuring\n    if (isUnloadedImage(element)) {\n      const waitTime = await ensureImageLoaded(element);\n      didWaitFor(waitTime);\n    }\n\n    // Transforms before adding\n    beforeAdd(element, continueInNextRegion);\n\n    const addedElement = await addElementNode(element);\n\n    // Transforms after adding\n    afterAdd(addedElement, continueInNextRegion);\n  };\n\n  return safeAddElementNode(content);\n};\n\nexport default flowIntoRegions;\n"],"names":["orderedListRule","tableRowRule"],"mappings":"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"}